; file: bcd2int.l20
; author: Aidan Jones
; description: converts 8 digit bcd to integer
MOV R2 num
LDR R2 R2
PSR PC
JMP bcd_to_int
HLT
__DATA num 0x255

; converts bcd to int
; put bcd in R2, int will be put in R2
; uses R3-R10 temporarily
bcd_to_int
    ; MOV R2 num
    MOV R3 #0; converted number
    ADD R0 R2 R0; compare against 0
    BZS bcd_to_int_end
    MOV R6 #-3
    MOV R8 #-4
    MOV R9 #-8
    MOV R10 #32
    ADD R0 R2 R0; compare against 0
    BZS bcd_to_int_end
    bcd_to_int_loop1
        MOV R5 #x1F
        NND R4 R2 R1
        NND R4 R4 R4; grab last bit
        MOV R3 R3 LSR R1; shift output right 1
        MOV R4 R4 LSL R5; shift lsb of bcd to msb of output
        ADD R3 R3 R4; add bit to output
        MOV R2 R2 LSR R1; shift bcd right 1
        ADD R10 R10 RNEG; decrement 
        ADD R0 R2 R0; compare against 0
        BZS bcd_to_int_end
        MOV R5 #xF
        MOV R7 #32
        ; scan for 8 or greater
        bcd_to_int_loop2
            ADD R7 R7 R8
            ADD R0 R7 R0
            BNS bcd_to_int_loop1
            MOV R4 R2 LSR R7
            NND R4 R4 R5
            NND R4 R4 R4; bit mask the digit
            ADD R0 R4 R9
            BNS bcd_to_int_loop2
                ADD R4 R4 R6; subtract 3 from digit
                MOV R5 R5 LSL R7
                NND R5 R5 R5
                NND R2 R2 R5
                NND R2 R2 R2; bit mask bcd to clear digit
                MOV R4 R4 LSL R7
                ADD R2 R2 R4; add corrected digit
                NND R5 R5 R5
                MOV R5 R5 LSR R7; restore bit mask
            JMP bcd_to_int_loop2
    bcd_to_int_end
    MOV R2 R3 LSR R10; move output to new
    PPR PC; return
; end of program